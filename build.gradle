import org.apache.tools.ant.taskdefs.condition.Os
import org.ajoberstar.gradle.git.tasks.*

def jooqPackage = "org/github/rwynn/wellington/persistence/jooq"
def jsSrcDir = "$rootProject.projectDir/src/main/resources/static/js"
def jsSrcFiles = ["${jsSrcDir}/app.js", "${jsSrcDir}/services.js",
        "${jsSrcDir}/controllers.js", "${jsSrcDir}/filters.js", "${jsSrcDir}/directives.js"]
def appProps = new Properties()
appProps.load(new FileInputStream(file("$rootProject.projectDir/src/main/resources/application.properties")))

buildscript {
    repositories {
        mavenCentral()
        maven { url "http://repo.spring.io/milestone" }
        mavenLocal()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.3.2.RELEASE")
        classpath('com.eriwen:gradle-js-plugin:1.11.1')
        classpath("org.postgresql:postgresql:9.3-1101-jdbc41")
        classpath('org.ajoberstar:gradle-git:0.6.3')
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'eclipse-wtp'
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: 'jacoco'
apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: 'jdepend'
apply plugin: 'pmd'
apply plugin: 'js'

task wrapper(type: Wrapper) {
    gradleVersion = '2.11'
}

jar {
    baseName = 'wellington'
    version =  '0.1.0'
}

configurations {
    jooq {
        extendsFrom compile
    }
    yuicompress {
        extendsFrom compile
    }
}

repositories {
    mavenCentral()
    maven { url "http://repo.spring.io/libs-milestone" }
    maven { url "https://repository.jboss.org/nexus/content/repositories/releases" }
}

dependencies {

    compile('org.apache.tomcat:tomcat-jdbc:8.0.30')
    compile('net.sf.ehcache:ehcache-core:2.6.11')
    compile("org.springframework:spring-core:4.2.4.RELEASE")
    compile("org.springframework:spring-jms:4.2.4.RELEASE")
    compile("org.springframework:spring-context-support:4.2.4.RELEASE")
    compile("org.springframework:spring-orm:4.2.4.RELEASE")
    compile("org.springframework:spring-web:4.2.4.RELEASE")
    compile("org.springframework:spring-webmvc:4.2.4.RELEASE")
    compile("org.springframework.boot:spring-boot-starter-web:1.3.2.RELEASE")
    compile("org.springframework.boot:spring-boot-starter-actuator:1.3.2.RELEASE")
    compile("org.springframework.data:spring-data-jpa:1.9.2.RELEASE")
    compile("org.hibernate:hibernate-entitymanager:5.1.0.Final")
    compile("org.hibernate:hibernate-core:5.1.0.Final")
    compile("org.hibernate:hibernate-validator:5.1.0.Final")
    compile("org.aspectj:aspectjweaver:1.8.8")
    compile("org.mindrot:jbcrypt:0.3m")
    compile("org.postgresql:postgresql:9.4.1207.jre7")
    compile("org.yaml:snakeyaml:1.16")
    compile("org.apache.activemq:activemq-client:5.9.0")
    compile("org.springframework.security:spring-security-web:4.0.3.RELEASE")
    compile("org.springframework.security:spring-security-config:4.0.3.RELEASE")

    compile("com.ibm.icu:icu4j:3.4.4")
    compile('net.sf.dozer:dozer:5.4.0')  {
        exclude group: 'org.slf4j'
    }
    testCompile("junit:junit:4.11")
    testCompile('org.mockito:mockito-all:1.9.5')

    compile("org.jooq:jooq:3.6.4")
    jooq("org.jooq:jooq-meta:3.6.4")
    jooq("org.jooq:jooq-codegen:3.6.4")
    jooq(files("config/jooq"))

    compile("org.thymeleaf:thymeleaf-spring4:2.1.4.RELEASE")
    compile("nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect:1.3.2")
    compile("org.thymeleaf.extras:thymeleaf-extras-springsecurity4:2.1.2.RELEASE")
    compile 'edu.vt.middleware:vt-password:3.1.2'

    compile 'org.webjars:jquery:2.2.0'
    compile 'org.webjars:bootstrap:3.3.6'
    compile 'org.webjars:angularjs:1.5.0'

    yuicompress("com.yahoo.platform.yui:yuicompressor:2.4.8")
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination "${buildDir}/jacocoHtml"
    }
}

pmdMain {
    excludes = ["${jooqPackage}/**/*.java"]
}

checkstyleMain {
    excludes = ["${jooqPackage}/**/*.java"]
}

findbugsMain {
    excludes = ["${jooqPackage}/**/*.java"]
    excludeFilter = file("$rootProject.projectDir/config/findbugs/excludeFilter.xml")
    reportLevel "high"
}

[findbugsMain, findbugsTest]*.reports {
    xml.enabled false
    html.enabled true
}

task npm(type: Exec) {
    group = "Build"
    description = "Installs all Node.js dependencies defined in package.json"
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        commandLine 'cmd','/c', 'npm', 'install'
    } else {
        commandLine = ["npm", "install"]
    }
    inputs.file "package.json"
    outputs.dir "node_modules"
}

task webdriverUpdate(type: Exec) {
    group = "Build"
    description = "Updates web driver"
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        commandLine 'cmd','/c', "node", "$rootProject.projectDir/node_modules/protractor/bin/webdriver-manager", "update"
    } else {
        commandLine = ["$rootProject.projectDir/node_modules/protractor/bin/webdriver-manager", "update"]
    }
}

task protractorRun(type: Exec) {
    group = "Build"
    description = "Runs end to end tests"
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        commandLine 'cmd','/c', "node", "$rootProject.projectDir/node_modules/protractor/bin/protractor",
                "$rootProject.projectDir/src/test/javascript/protractor-conf.js"
    } else {
        commandLine = ["$rootProject.projectDir/node_modules/protractor/bin/protractor",
                "$rootProject.projectDir/src/test/javascript/protractor-conf.js"]
    }
}

task karmaRun(type: Exec) {
    group = "Build"
    description = "Runs unit tests"
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        commandLine 'cmd','/c', "node", "$rootProject.projectDir/node_modules/karma/bin/karma",
                "start", "$rootProject.projectDir/src/test/javascript/karma.conf.js"
    } else {
        commandLine = ["$rootProject.projectDir/node_modules/karma/bin/karma",
                "start", "$rootProject.projectDir/src/test/javascript/karma.conf.js"]
    }
}

task jooqClean(type: Delete) {
    delete file("$rootProject.projectDir/src/main/java/${jooqPackage}")
}

task jooqGen(type: JavaExec) {
    inputs.file file("$rootProject.projectDir/config/jooq/jooq-config.xml")
    outputs.dir file("$rootProject.projectDir/src/main/java/${jooqPackage}")
    main = 'org.jooq.util.GenerationTool'
    classpath configurations.jooq
    args "/jooq-config.xml"
}

task minifyCss(type: JavaExec) {
    def css_in = "$rootProject.projectDir/src/main/resources/static/css/app.css"
    def css_out = "${buildDir}/resources/main/static/css/app-min.css"
    inputs.file file("$css_in")
    outputs.dir file("$css_out")
    main = 'com.yahoo.platform.yui.compressor.Bootstrap'
    classpath configurations.yuicompress
    args = ["--type", "css", "-o", "$css_out", "$css_in"]
}

combineJs {
    source = jsSrcFiles
    dest = file("${buildDir}/resources/main/static/js/all.js")
}

minifyJs {
    source = combineJs
    dest = file("${buildDir}/resources/main/static/js/all-min.js")
    sourceMap = file("${buildDir}/resources/main/static/js/all.sourcemap.json")
    closure {
        warningLevel = 'QUIET'
    }
}

task jsHint(type:com.eriwen.gradle.js.tasks.JsHintTask) {
    source = jsSrcFiles
    dest = file("${buildDir}/reports/jshint/jshint.xml")
    ignoreExitCode = false
    reporter = 'checkstyle'
}

task writeGitInfo(type: GitBranchList) {
    doLast {
        OutputStream os = new FileOutputStream(file("${buildDir}/resources/main/git.properties"))
        Properties gitProps = new Properties()
        gitProps.setProperty("git.branch", workingBranch.name)
        gitProps.setProperty("git.commit.id", workingBranch.commit.abbreviatedId)
        gitProps.store(os, "generated by gradle")
        os.close()
    }
}

task devMode(type: GitBranchList) {
    doLast {
      def os = new FileOutputStream(file("${buildDir}/resources/main/dev.properties"))
      def devProps = new Properties()
      devProps.setProperty("resources.root", file("$rootProject.projectDir/src/main/resources/static").toURL().toString())
      devProps.store(os, "generated by gradle")
      os.close()
  }
}

evaluationDependsOn(":migration")
test.finalizedBy jacocoTestReport
test.finalizedBy check
test.finalizedBy jsHint
compileJava.dependsOn jooqGen
processResources.finalizedBy minifyCss
processResources.finalizedBy minifyJs
processResources.finalizedBy devMode
processResources.finalizedBy writeGitInfo
clean.dependsOn jooqClean
protractorRun.dependsOn project(':migration').cleanAndMigrate
protractorRun.dependsOn webdriverUpdate
writeGitInfo.onlyIf { file("$rootProject.projectDir/.git").exists() }
writeGitInfo.onlyIf { !System.getenv()["TRAVIS"].equals("true") }
devMode.onlyIf { "true".equals(appProps['info.app.development']) }
